// Code generated by MockGen. DO NOT EDIT.
// Source: query.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/JavaHutt/crud-api/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockqueryService is a mock of queryService interface.
type MockqueryService struct {
	ctrl     *gomock.Controller
	recorder *MockqueryServiceMockRecorder
}

// MockqueryServiceMockRecorder is the mock recorder for MockqueryService.
type MockqueryServiceMockRecorder struct {
	mock *MockqueryService
}

// NewMockqueryService creates a new mock instance.
func NewMockqueryService(ctrl *gomock.Controller) *MockqueryService {
	mock := &MockqueryService{ctrl: ctrl}
	mock.recorder = &MockqueryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockqueryService) EXPECT() *MockqueryServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockqueryService) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockqueryServiceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockqueryService)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockqueryService) Get(ctx context.Context, id int) (*model.SlowestQuery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.SlowestQuery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockqueryServiceMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockqueryService)(nil).Get), ctx, id)
}

// GetAll mocks base method.
func (m *MockqueryService) GetAll(ctx context.Context, page int, order string) ([]model.SlowestQuery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, page, order)
	ret0, _ := ret[0].([]model.SlowestQuery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockqueryServiceMockRecorder) GetAll(ctx, page, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockqueryService)(nil).GetAll), ctx, page, order)
}

// Insert mocks base method.
func (m *MockqueryService) Insert(ctx context.Context, query model.SlowestQuery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, query)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockqueryServiceMockRecorder) Insert(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockqueryService)(nil).Insert), ctx, query)
}

// InsertBulk mocks base method.
func (m *MockqueryService) InsertBulk(ctx context.Context, queries []model.SlowestQuery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBulk", ctx, queries)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBulk indicates an expected call of InsertBulk.
func (mr *MockqueryServiceMockRecorder) InsertBulk(ctx, queries interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBulk", reflect.TypeOf((*MockqueryService)(nil).InsertBulk), ctx, queries)
}

// Update mocks base method.
func (m *MockqueryService) Update(ctx context.Context, query model.SlowestQuery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, query)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockqueryServiceMockRecorder) Update(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockqueryService)(nil).Update), ctx, query)
}
